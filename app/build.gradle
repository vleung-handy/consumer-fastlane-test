import org.gradle.logging.StyledTextOutputFactory

import static org.gradle.logging.StyledTextOutput.Style

apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'io.fabric'
apply plugin: 'newrelic'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    signingConfigs {
        stage {
            keyAlias 'HandyStageKey'
            keyPassword 'S0H@ndy!'
            storeFile file('handy-stage-key.keystore')
            storePassword 'S0H@ndy!'
        }
        prod {
            keyAlias 'HandyProdKey'
            keyPassword 'S0H@ndy!'
            storeFile file('handy-prod-key.keystore')
            storePassword 'S0H@ndy!'
        }
        debug {
            keyAlias "handy-debug-key"
            keyPassword "handy-debug"
            storeFile file("handy-debug-key.keystore")
            storePassword "handy-debug"
        }
    }
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    defaultConfig {
        applicationId 'com.handy.handy'
        minSdkVersion 15
        targetSdkVersion 23
        versionName '1.22.0'
        versionCode computeVersionCode(versionName)
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    productFlavors {
        stage {
            applicationId 'com.handy.handy.stage'
            signingConfig signingConfigs.stage
            manifestPlaceholders = [PACKAGE_NAME: "com.handy.handy.stage"]
        }
        prod {
            applicationId 'com.handy.handy.prod'
            signingConfig signingConfigs.prod
            manifestPlaceholders = [PACKAGE_NAME: "com.handy.handy.prod"]
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def buildInfo = "${flavorName}-${variant.buildType.name}"
                def versionInfo = "${variant.versionName}-${variant.versionCode}"
                output.outputFile = new File(output.outputFile.parentFile,
                        "handy-${buildInfo}-${versionInfo}.apk");
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    useLibrary 'org.apache.http.legacy'
}

ext {
    supportLibraryVersion = '23.4.0'
    googlePlayServicesVersion = '9.0.0'
    firebaseVersion = '9.0.0'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('com.crashlytics.sdk.android:crashlytics:2.6.0@aar') {
        transitive = true;
    }
    compile files('../libs/yozio-android-sdk.jar')
    compile project(':simplealertdialog')
    compile project(':androidspinner')
    compile 'com.squareup.picasso:picasso:2.5.2'
    androidTestCompile('com.android.support.test:runner:0.4.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
        compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha1'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }


    compile 'com.squareup.picasso:picasso:2.5.2'
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:support-v4:$supportLibraryVersion"
    compile "com.android.support:support-annotations:$supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha1'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.newrelic.agent.android:android-agent:5.3.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'io.card:android-sdk:5.3.0'
    compile 'com.stripe:stripe-android:1.0.4'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'com.google.guava:guava:19.0'
    compile 'com.scottyab:secure-preferences-lib:0.1.1'
    compile 'com.facebook.android:facebook-android-sdk:4.10.1'
    compile 'com.airbnb:deeplinkdispatch:1.5.0'
    compile 'com.github.renaudcerrato:ViewPagerIndicator:2.4.1-gradle'
    compile 'com.urbanairship.android:urbanairship-sdk:6.4.1'
    compile 'com.usebutton:android-sdk:5.0.1'
    compile "com.google.android.gms:play-services-gcm:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-basement:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-base:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-identity:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-wallet:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-location:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-analytics:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-ads:$googlePlayServicesVersion"
    compile "com.google.firebase:firebase-core:$firebaseVersion"
    compile "com.google.firebase:firebase-crash:$firebaseVersion"

    apt 'com.airbnb:deeplinkdispatch-processor:1.5.0'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'

    //Testing
    testCompile 'org.robolectric:robolectric:3.2-SNAPSHOT'
    testCompile 'org.robolectric:shadows-support-v4:3.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.robolectric:shadows-multidex:3.0'

}

dexcount {
    format = "list"
    includeClasses = false
    includeFieldCount = false
    includeTotalMethodCount = false
    orderByMethodCount = false
    verbose = false
}

def computeVersionCode(versionName) {
    def versionNameMatcher = (versionName =~ /^([1-9]\d*)\.(\d{1,2})\.(\d{1,2})$/)
    if (versionNameMatcher.matches()) {
        def identifiers = (versionNameMatcher[0] - [versionName])
        def (major, minor, patch) = identifiers.collect { it.toInteger() }
        def versionCode = (major * 1000000) + (minor * 10000) + (patch * 100)

        def out = services.get(StyledTextOutputFactory).create("debug")
        out.withStyle(Style.Info).println("\nBuilding version ${versionName} (${versionCode})\n")
        return versionCode
    } else {
        throw new InvalidUserDataException("Illegal version name ${versionName}")
    }
}

apply plugin: 'com.google.gms.google-services'
